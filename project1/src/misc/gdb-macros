#
# A set of useful macros that can help debug Pintos.
#
# Include with "source" cmd in gdb.
# Use "help user-defined" for help.
#
# Author: Godmar Back <gback@cs.vt.edu>, Feb 2006
#
# $Id: gdb-macros,v 1.1 2006-04-07 18:29:34 blp Exp $
#

# for internal use
define offsetof
    set $rc = (char*)&((struct $arg0 *)0)->$arg1 - (char*)0
end

define list_entry
    offsetof $arg1 $arg2
    set $rc = ((struct $arg1 *) ((uint8_t *) ($arg0) - $rc))
end

# dump a Pintos list
define dumplist
    set $list = $arg0
    set $e = $list->head.next
    set $i = 0
    while $e != &(($arg0).tail)
        list_entry $e $arg1 $arg2
        set $l = $rc
        printf "pintos-debug: dumplist #%d: %p ", $i++, $l
        output *$l
        set $e = $e->next
        printf "\n"
    end
end

document dumplist
    Dump the content of a Pintos list, 
    invoke as dumplist name_of_list name_of_struct name_of_elem_in_list_struct
end

# print a thread's backtrace, given a pointer to the struct thread *
define btthread
   if $arg0 == ($esp - ((unsigned)$esp % 4096)) 
	bt
   else
       set $saveEIP = $eip 
       set $saveESP = $esp 
       set $saveEBP = $ebp 

       set $esp = ((struct thread *)$arg0)->stack
       set $ebp = ((void**)$esp)[2]
       set $eip = ((void**)$esp)[4]

       bt

       set $eip = $saveEIP
       set $esp = $saveESP
       set $ebp = $saveEBP
   end
end
document btthread
    Show the backtrace of a thread,
    invoke as btthread pointer_to_struct_thread
end

# print backtraces associated with all threads in a list
define btthreadlist
    set $list = $arg0
    set $e = $list->head.next
    while $e != &(($arg0).tail)
        list_entry $e thread $arg1
        printf "pintos-debug: dumping backtrace of thread '%s' @%p\n", \
                ((struct thread*)$rc)->name, $rc
        btthread $rc
        set $e = $e->next
        printf "\n"
    end
end
document btthreadlist
    Given a list of threads, print each thread's backtrace
    invoke as btthreadlist name_of_list name_of_elem_in_list_struct
end

# print backtraces of all threads (based on 'all_list' all threads list)
define btthreadall
    btthreadlist all_list allelem
end
document btthreadall
    Print backtraces of all threads
end

# print a correct backtrace by adjusting $eip
# this works best right at intr0e_stub
define btpagefault
    set $saveeip = $eip
    set $eip = ((void**)$esp)[1]
    backtrace
    set $eip = $saveeip
end
document btpagefault
    Print a backtrace of the current thread after a pagefault
end

# invoked whenever the program stops
define hook-stop
    # stopped at stub #0E = #14 (page fault exception handler stub)
    if ($eip == intr0e_stub)
        set $savedeip = ((void**)$esp)[1]
        # if this was in user mode, the OS should handle it
        # either handle the page fault or terminate the process
        if ($savedeip < 0xC0000000)
            printf "pintos-debug: a page fault exception occurred in user mode\n"
            printf "pintos-debug: hit 'c' to continue, or 's' to step to intr_handler\n"
        else
            # if this was in kernel mode, a stack trace might be useful
            printf "pintos-debug: a page fault occurred in kernel mode\n"
            btpagefault
        end
    end
end

# load symbols for a Pintos user program
define loadusersymbols
    shell objdump -h $arg0 | awk '/.text/ { print "add-symbol-file $arg0 0x"$4 }' > .loadsymbols
    source .loadsymbols
    shell rm -f .loadsymbols
end
document loadusersymbols
    Load the symbols contained in a user program's executable.
    Example:
        loadusersymbols tests/userprog/exec-multiple
end

define debugpintos
    target remote localhost:1234
end
document debugpintos
    Attach debugger to pintos process
end


##############################
#       Soogeun Macros       #
##############################

# list의 길이를 알아냄
define list_len
    set $ptr = ($arg0).head.next
    set $len = 0
    while $ptr != &(($arg0).tail)
        set $len++
        set $ptr = $ptr->next
    end
    print $len
end
 
document list_len
    Return the number of nodes in the list
end

# 인자로 받은 한 thread의 sleep_ticks를 출력
define p_thread_sleepticks
    print ($arg0).sleep_ticks
end

document p_thread_sleepticks
    print a thread's sleep_ticks
end

# 인자로 받은 한 thread의 name을 출력
define p_thread_name
    print ($arg0).name
end

document p_thread_name
    print a thread's name
end

# 인자로 받은 한 thread의 priority를 출력
define p_thread_priority
    print ($arg0).priority
end

document p_thread_priority
    print a thread's priority
end

# sleep_list에 있는 thread들 개수와, 각 thread의 이름, sleep_ticks 값을 출력
define p_threads_on_sleeplist
    list_len sleep_list
    set $ptr = sleep_list.head.next
    while $ptr != &(sleep_list.tail)
        list_entry $ptr thread elem
        p_thread_name $rc
        p_thread_sleepticks $rc
        p_thread_priority $rc
        set $ptr = $ptr->next
    end
end

document p_threads_on_sleeplist
    sleep_list의 list length와, 모든 thread의 이름, sleepticks를 출력
end


##############################
#        Yuho Macros         #
##############################